/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v4.25.3
// source: src/Protos/support-chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js')

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js')
const proto = require('./support-chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.SupportChatServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.SupportChatServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.TextMessageRequest,
 *   !proto.Empty>}
 */
const methodDescriptor_SupportChatService_SendTextMessage = new grpc.web.MethodDescriptor(
  '/SupportChatService/SendTextMessage',
  grpc.web.MethodType.UNARY,
  proto.TextMessageRequest,
  proto.Empty,
  /**
   * @param {!proto.TextMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.TextMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SupportChatServiceClient.prototype.sendTextMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SupportChatService/SendTextMessage',
      request,
      metadata || {},
      methodDescriptor_SupportChatService_SendTextMessage,
      callback);
};


/**
 * @param {!proto.TextMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.SupportChatServicePromiseClient.prototype.sendTextMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SupportChatService/SendTextMessage',
      request,
      metadata || {},
      methodDescriptor_SupportChatService_SendTextMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.FileMessageRequest,
 *   !proto.Empty>}
 */
const methodDescriptor_SupportChatService_SendFileMessage = new grpc.web.MethodDescriptor(
  '/SupportChatService/SendFileMessage',
  grpc.web.MethodType.UNARY,
  proto.FileMessageRequest,
  proto.Empty,
  /**
   * @param {!proto.FileMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.Empty.deserializeBinary
);


/**
 * @param {!proto.FileMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SupportChatServiceClient.prototype.sendFileMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SupportChatService/SendFileMessage',
      request,
      metadata || {},
      methodDescriptor_SupportChatService_SendFileMessage,
      callback);
};


/**
 * @param {!proto.FileMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.Empty>}
 *     Promise that resolves to the response
 */
proto.SupportChatServicePromiseClient.prototype.sendFileMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SupportChatService/SendFileMessage',
      request,
      metadata || {},
      methodDescriptor_SupportChatService_SendFileMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ReceiveRequest,
 *   !proto.MessageResponse>}
 */
const methodDescriptor_SupportChatService_ReceiveMessage = new grpc.web.MethodDescriptor(
  '/SupportChatService/ReceiveMessage',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.ReceiveRequest,
  proto.MessageResponse,
  /**
   * @param {!proto.ReceiveRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MessageResponse.deserializeBinary
);


/**
 * @param {!proto.ReceiveRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.MessageResponse>}
 *     The XHR Node Readable Stream
 */
proto.SupportChatServiceClient.prototype.receiveMessage =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/SupportChatService/ReceiveMessage',
      request,
      metadata || {},
      methodDescriptor_SupportChatService_ReceiveMessage);
};


/**
 * @param {!proto.ReceiveRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.MessageResponse>}
 *     The XHR Node Readable Stream
 */
proto.SupportChatServicePromiseClient.prototype.receiveMessage =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/SupportChatService/ReceiveMessage',
      request,
      metadata || {},
      methodDescriptor_SupportChatService_ReceiveMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.HistoryRequest,
 *   !proto.HistoryResponse>}
 */
const methodDescriptor_SupportChatService_History = new grpc.web.MethodDescriptor(
  '/SupportChatService/History',
  grpc.web.MethodType.UNARY,
  proto.HistoryRequest,
  proto.HistoryResponse,
  /**
   * @param {!proto.HistoryRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.HistoryResponse.deserializeBinary
);


/**
 * @param {!proto.HistoryRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.HistoryResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.HistoryResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.SupportChatServiceClient.prototype.history =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/SupportChatService/History',
      request,
      metadata || {},
      methodDescriptor_SupportChatService_History,
      callback);
};


/**
 * @param {!proto.HistoryRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.HistoryResponse>}
 *     Promise that resolves to the response
 */
proto.SupportChatServicePromiseClient.prototype.history =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/SupportChatService/History',
      request,
      metadata || {},
      methodDescriptor_SupportChatService_History);
};


module.exports = proto;

