// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendAPI.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230316142341_ChangedModels")]
    partial class ChangedModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.1.23111.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.CountryMovieInfo", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("MovieInfoId")
                        .HasColumnType("int");

                    b.HasKey("CountryId", "MovieInfoId");

                    b.HasIndex("MovieInfoId");

                    b.ToTable("CountryMovieInfo");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.CurrencyValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("CurrencyValue", t =>
                        {
                            t.HasCheckConstraint("CK_CurrencyValue_Value", "Value >= 0");
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Fees", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("RussiaId")
                        .HasColumnType("int");

                    b.Property<int?>("USAId")
                        .HasColumnType("int");

                    b.Property<int?>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RussiaId");

                    b.HasIndex("USAId");

                    b.HasIndex("WorldId");

                    b.ToTable("Fees");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.GenreMovieInfo", b =>
                {
                    b.Property<int>("MovieInfoId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("MovieInfoId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GenreMovieInfo");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.MovieInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeRating")
                        .HasColumnType("int");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FeesId")
                        .HasColumnType("int");

                    b.Property<int>("MovieLength")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slogan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("FeesId");

                    b.HasIndex("TypeId");

                    b.ToTable("Movies", t =>
                        {
                            t.HasCheckConstraint("CK_MovieInfo_MovieLength", "MovieLength > 0");

                            t.HasCheckConstraint("CK_MovieInfo_Rating", "0 <= Rating AND Rating <= 10");

                            t.HasCheckConstraint("CK_MovieInfo_Year", "Year >= 1900");
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.PersonProffessionInMovie", b =>
                {
                    b.Property<int>("MovieInfoId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Proffession")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MovieInfoId", "PersonId", "Proffession");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonProffessionInMovie");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.SeasonsInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EpisodesCount")
                        .HasColumnType("int");

                    b.Property<int>("MovieInfoId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieInfoId");

                    b.ToTable("SeasonsInfo", t =>
                        {
                            t.HasCheckConstraint("CK_SeasonsInfo_EpisodesCount", "EpisodesCount >= 0");

                            t.HasCheckConstraint("CK_SeasonsInfo_Number", "Number >= 0");
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Types", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("DataAccess.Entities.IdentityLogic.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccess.Entities.IdentityLogic.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.CountryMovieInfo", b =>
                {
                    b.HasOne("DataAccess.Entities.BusinessLogic.Country", null)
                        .WithMany("Movies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.BusinessLogic.MovieInfo", null)
                        .WithMany("Countries")
                        .HasForeignKey("MovieInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Fees", b =>
                {
                    b.HasOne("DataAccess.Entities.BusinessLogic.CurrencyValue", "Russia")
                        .WithMany()
                        .HasForeignKey("RussiaId");

                    b.HasOne("DataAccess.Entities.BusinessLogic.CurrencyValue", "USA")
                        .WithMany()
                        .HasForeignKey("USAId");

                    b.HasOne("DataAccess.Entities.BusinessLogic.CurrencyValue", "World")
                        .WithMany()
                        .HasForeignKey("WorldId");

                    b.Navigation("Russia");

                    b.Navigation("USA");

                    b.Navigation("World");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.GenreMovieInfo", b =>
                {
                    b.HasOne("DataAccess.Entities.BusinessLogic.Genre", null)
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.BusinessLogic.MovieInfo", null)
                        .WithMany("Genres")
                        .HasForeignKey("MovieInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.MovieInfo", b =>
                {
                    b.HasOne("DataAccess.Entities.BusinessLogic.CurrencyValue", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId");

                    b.HasOne("DataAccess.Entities.BusinessLogic.Fees", "Fees")
                        .WithMany()
                        .HasForeignKey("FeesId");

                    b.HasOne("DataAccess.Entities.BusinessLogic.Types", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("Fees");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.PersonProffessionInMovie", b =>
                {
                    b.HasOne("DataAccess.Entities.BusinessLogic.MovieInfo", null)
                        .WithMany("Proffessions")
                        .HasForeignKey("MovieInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.BusinessLogic.Person", null)
                        .WithMany("Proffessions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.SeasonsInfo", b =>
                {
                    b.HasOne("DataAccess.Entities.BusinessLogic.MovieInfo", "MovieInfo")
                        .WithMany("SeasonsInfo")
                        .HasForeignKey("MovieInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieInfo");
                });

            modelBuilder.Entity("DataAccess.Entities.IdentityLogic.User", b =>
                {
                    b.HasOne("DataAccess.Entities.IdentityLogic.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Country", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Genre", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.MovieInfo", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("Genres");

                    b.Navigation("Proffessions");

                    b.Navigation("SeasonsInfo");
                });

            modelBuilder.Entity("DataAccess.Entities.BusinessLogic.Person", b =>
                {
                    b.Navigation("Proffessions");
                });
#pragma warning restore 612, 618
        }
    }
}
